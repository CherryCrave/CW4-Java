package CW4;


/**
 * interface ZAPP  for 5COM2007 Cwk 4
 *
 * @author Mohamad & Bailey
 * @version 18/4/2024
 */
public interface ZAPP
{
    /**
     * Returns all of the details of the game
     */
    public String toString();

    /**Returns a string with details of a specific champion
     * @param champNo -  number of the champion
     * @return the details of the champion
     */
    public int getChampionDetails(int champNo);


    /**Returns all the champions
     *
     * @return the name and ????????????????
     **/
    public String getAllChampions();


    /** Given the challenge ID, Returns true if champions meet
     * the requirements, returns false if the champions do not meet the requirements.
     * @param challengeId  - champion ID
     * @return a boolean value
     */
    public int canStartChallenge(int challengeId);


    /**Returns the result of a completed challenge (Win/Lose)
     * @param challengeId is the challenge ID
     *
     **/
    public int startChallenge(int challengeId);


    /**Returns a String representation of all the cards in all areas including the name of each area
     * @return a String representation of all cards on specified area
     **/
    public String getAllCardsInAllAreas();


    /**Returns true if a Card is allowed to move using the bridge, false otherwise
     * A move can be made if:
     * the rating of the card  >= the rating of the destination area
     * AND the destination area is not full
     * AND the card has sufficient credits
     * AND the card is currently in the source area
     * AND the card id is for a card on the system
     * AND the bridge code is the code for a bridge on the system
     * @param trId is the id of the card requesting the move
     * @param brCode is the code of the bridge by which the card wants to move
     * @return true if the card is allowed on the bridge journey, false otherwise
     **/
    public boolean canMove(int trId, String brCode);


    /**Returns the result of a card requesting to move over a bridge.
     * A move will be successful if:
     * the luxury rating of the card  >= the luxury rating of the destination area
     * AND the destination area is not full
     * AND the card has sufficient credits
     * AND the card is currently in the source area
     * AND the card id is for a card in the system
     * AND the bridge code is the code for a bridge on the system
     * If the bridge crossing can be made, the card information is removed from
     * the source area, added to the destination area, card details updated and a suitable message returned.
     * a suitable message returned.
     * If bridge journey cannot be made, the state of the system remains unchanged
     * and a message specifying the reason is returned.
     * @param pCardId is the id of the card requesting the move
     * @param brCode is the code of the bridge by which the card wants to move
     * @return a String giving the result of the request
     **/
    public String move(int pCardId, String brCode );


    /** Allows a card to top up their credits.This method is not concerned with
     *  the cost of a credit as currency and prices may vary between resorts.
     *  @param id the id of the card toping up their credits
     *  @param creds the number of credits purchased to be added to cards information
     */
    public void topUpCredits(int id, int creds);

    /** Allows a card to convert points to credits
     *  @param cdId the id of the card toping up their credits
     */
    public void convertPoints(int cdId);



}
